// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Test {
  id Int @id @default(autoincrement())
  name String
}

model User {
  id                 Int      @id @default(autoincrement())
  email              String   @unique
  password           String
  mobile             String?
  name               String
  isVerified         Boolean  @default(false)
  verificationToken  String? @unique
  resetPasswordToken String?
  resetTokenExpiry   DateTime?
  refreshToken       String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  addresses          Address[]
  ratings            Rating[]

  wishlists          Wishlist[]
  carts              Cart[]
  coupons            Coupon[]
  couponLinks        CouponUser[]

  orders             Order[]  
  Return             ReturnRequest[]

  isSubscribed       Boolean @default(false)

  StockSubscription  StockSubscription[]

  ContactMessage     ContactMessage[]
  
}

model InvalidatedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Address {
  id          Int      @id @default(autoincrement())
  userId      Int
  street      String
  houseno     String
  city        String
  state       String?
  postalCode  String?
  country     String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String
  slug        String       @unique
  description String?
  price       Float
  stock       Int          @default(0)
  isFeatured  Boolean      @default(false)
  categoryId  Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  discounts   Discount[]
  images      ProductImage[]
  tags        ProductTag[]
  ratings     Rating[]
  wishlists   Wishlist[]
  carts       Cart[]
  coupons     Coupon[]
  couponLinks CouponProduct[]

  orderItems  OrderItem[]
  Retuen      ReturnRequestDetail[]

  StockSubscription  StockSubscription[]
}

model Discount {
  id        Int       @id @default(autoincrement())
  productId Int
  type      String 
  value     Float
  startsAt  DateTime?
  endsAt    DateTime?
  createdAt DateTime  @default(now())

  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Coupon {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  type        String
  value       Float
  usageLimit  Int?
  usedCount   Int       @default(0)
  startsAt    DateTime?
  endsAt      DateTime?
  createdAt   DateTime  @default(now())

  productId   Int?
  userId      Int?

  product     Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  couponProducts CouponProduct[]
  couponUsers    CouponUser[]

  orders      Order[]
}

model CouponProduct {
  id        Int      @id @default(autoincrement())
  couponId  Int
  productId Int
  coupon    Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model CouponUser {
  id        Int      @id @default(autoincrement())
  couponId  Int
  userId    Int
  coupon    Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  url       String
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Tag {
  id    Int          @id @default(autoincrement())
  name  String       @unique
  products ProductTag[]
}

model ProductTag {
  productId Int
  tagId     Int

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([productId, tagId])
}

model Rating {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int      @default(5)
  review    String?
  status    String   @default("pending")
  createdAt DateTime @default(now())

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Cart {
  id         Int      @id @default(autoincrement())
  userId     Int
  productId  Int
  quantity   Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id            Int          @id @default(autoincrement())
  userId        Int
  totalAmount   Float
  discountTotal Float?
  finalAmount   Float
  status        String        @default("pending")
  couponId      Int? 
  paymentMethod String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  coupon        Coupon?       @relation(fields: [couponId], references: [id])
  items         OrderItem[]
  Payment       PaymentTransaction[]

  Return        ReturnRequest[]
}

enum PaymentMethod {
  COD
  PAYPAL
  BKASH
  NAGAD
  VISA
  MASTERCARD
}

model OrderItem {
  id        Int       @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  subtotal  Float

  order     Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product    @relation(fields: [productId], references: [id])
}

model PaymentTransaction {
  id        Int      @id @default(autoincrement())
  orderId   Int
  provider  PaymentMethod
  amount    Float
  status    String
  transactionId String? @unique
  createdAt DateTime @default(now())

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model ReturnRequest {
  id           Int           @id @default(autoincrement())
  orderId      Int
  userId       Int
  status       ReturnStatus  @default(PENDING)
  refundAmount Float?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  order        Order         @relation(fields: [orderId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  details      ReturnRequestDetail[]
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  REFUNDED
}

model ReturnRequestDetail {
  id              Int      @id @default(autoincrement())
  returnRequestId Int
  productId       Int
  reason          String
  createdAt       DateTime @default(now())

  returnRequest   ReturnRequest @relation(fields: [returnRequestId], references: [id])
  product         Product       @relation(fields: [productId], references: [id])
  images          ReturnRequestDetailImage[]
}

model ReturnRequestDetailImage {
  id                  Int                 @id @default(autoincrement())
  returnRequestDetailId Int
  url                 String
  createdAt           DateTime            @default(now())

  returnRequestDetail ReturnRequestDetail @relation(fields: [returnRequestDetailId], references: [id], onDelete: Cascade)
}

model StockSubscription {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  userId    Int?
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id])
}

model BlogPost {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  content     String
  image       String? 
  author      String? 
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model VisitorLog {
  id        Int      @id @default(autoincrement())
  ip        String
  city      String?
  region    String?
  country   String?
  userAgent String?
  referrer  String?
  path      String
  createdAt DateTime @default(now())
}